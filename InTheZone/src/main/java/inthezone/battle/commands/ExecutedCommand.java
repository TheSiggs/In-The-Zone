package inthezone.battle.commands;

import inthezone.battle.Targetable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A command that has already been executed, plus the affected targetables.
 * */
public class ExecutedCommand {
	public final Command cmd;
	public final List<Targetable> affected = new ArrayList<>();

	/**
	 * true if the is the last in a sequence of commands generated by a single command request.
	 * */
	public final boolean lastInSequence;

	public ExecutedCommand(
		final Command cmd,
		final List<? extends Targetable> affected
	) {
		this(cmd, affected, false);
	}

	private ExecutedCommand(
		final Command cmd,
		final List<? extends Targetable> affected,
		final boolean lastInSequence
	) {
		this.cmd = cmd;
		this.lastInSequence = lastInSequence;

		final Set<Targetable> seen = new HashSet<>();
		for (Targetable t : affected) {
			if (!seen.contains(t)) this.affected.add(t);
			seen.add(t);
		}
	}

	public ExecutedCommand markLastInSequence() {
		return new ExecutedCommand(cmd, affected, true);
	}
}

