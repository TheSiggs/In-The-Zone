apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
//apply from: "src/main/resources/project.properties"
apply plugin: 'launch4j'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
        //classpath 'com.badlogicgames.packr:packr:1.2'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'edu.sc.seis.gradle:launch4j:1.0.6'
    }
}

apply plugin: 'eu.appsatori.fatjar'

def mainClass = 'nz.dcoder.inthezone.Main'
def oldMainClass = 'nz.dcoder.inthezone.OldMain'
def sceneClass = 'nz.dcoder.inthezone.MyScene'
def blenderClass = 'nz.dcoder.inthezone.BlenderRender'
def jmonkeyengine_version = '3.0'
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
	ext.mainClass = mainClass
}

repositories {
	mavenCentral()
	jcenter()
	// You may define additional repositories, or even remove "mavenCentral()".
	// Read more about repositories here:
	//   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
	flatDir {
		dirs 'libs'
	}
	//maven {
	//	url 'http://updates.jmonkeyengine.org/maven'
	//}
	//maven { url "http://dl.bintray.com/jmonkeyengine/contrib" }
	maven {
        url 'http://updates.jmonkeyengine.org/maven'
    }
	maven { url "http://dl.bintray.com/davidb/jme3stuff" }
}

sourceSets {
	main {
		//java {
		//srcDir 'src/main/java'
		//output.classesDir   = 'build/classes/main'      
		//}
		resources {
			//srcDir 'src/main/resources'
			//srcDirs = ["$projectDir/src/main/resources", "$projectDir/src/assets", "$projectDir/assets"]
			srcDirs = ["src/main/java", "src/main/resources", "src/assets", "assets"]
			//include '*.csv'
			include '*.properties', '**/*.fxml'
			output.resourcesDir = 'build/resources/main'
		}
		java {
			//srcDirs = ["src/main/java"]
			include '**/*.fxml', '**/*.java'
		}

		test {
			java {
				srcDirs = ["src/tests/java"]
			}
		}
	}
}

//def jmeGroup = 'com.jme3'
//def jmeVersion = '3.0.+'
def jmeGroup = 'net.sf.sociaal'
def jmeVersion = '3.0.0.20130526'
dependencies {

	// You can read more about how to add dependency here:
	//   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
	testCompile group: 'junit', name: 'junit', version: '4.10'
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile 'com.googlecode.aima-java:aima-core:0.11.0'
	compile 'com.jme3:jme3-blender:3.0.+'
	//compile jmeGroup +':jME3-core:'+ jmeVersion
	//compile jmeGroup +':jME3-effects:'+ jmeVersion
	//compile jmeGroup +':jME3-networking:'+ jmeVersion
	//compile jmeGroup +':jME3-plugins:'+ jmeVersion
	//compile jmeGroup +':jME3-jogg:'+ jmeVersion
	//compile jmeGroup +':jME3-terrain:'+ jmeVersion
	//compile jmeGroup +':jME3-blender:'+ jmeVersion
	//compile jmeGroup +':jME3-jbullet:'+ jmeVersion
	//compile jmeGroup +':jME3-niftygui:'+ jmeVersion
	//compile jmeGroup +':jME3-desktop:'+ jmeVersion
	////compile jmeGroup +':jme3-lwjgl:3.0.0.20130526'
	//compile 'net.sf.sociaal:jME3-lwjgl:3.0.0.20130526'
	//compile 'com.jme3x:jfx:1.126.2014-12-31_141919-8231852'
	compile "com.jme3x:jfx:1.+"
        //compile "org.apache.commons:commons-csv:1.0"
    compile 'com.badlogicgames.packr:packr:1.2'
}

//applicationDefaultJvmArgs = ["-Dgreeting.language=en"]
mainClassName = mainClass
startScripts {
	classpath  = files('lib/terrain-battle-0.0.1.jar')
}
jar {
    enabled = true
    baseName = "terrain-battle"
    version = '0.0.1'
    manifest {
        def manifestCp = configurations.runtime.files.collect  {
            File file = it
            "${file.name}"
        }.join(' ')
        attributes 'Class-Path': manifestCp
        attributes 'Main-Class': mainClass
    }
    from fileTree('src/main/resources').include('**/*.fxml')
    from fileTree('src/main/java').include('**/*.fxml')
    from fileTree('src/main/data').include('**/*.csv')
    from fileTree('src/main/data').include('**/*.txt')
    //from fileTree('src/main/java').include('**/*.class')
}
fatJar {
	enabled = true
	baseName = "fat-jar"
	version = '0.0.1'
	manifest {
		def manifestCp = configurations.runtime.files.collect  {
			File file = it
        	"${file.name}"
		}.join(' ')
		attributes 'Class-Path': manifestCp
		attributes 'Main-Class': mainClass
	}
	from fileTree('src/main/resources').include('**/*.fxml')
	from fileTree('src/main/java').include('**/*.fxml')
	from fileTree('src/main/data').include('**/*.csv')
	from fileTree('src/main/data').include('**/*.txt')
	//from fileTree('src/main/java').include('**/*.class')
}

test {
	classpath = project.sourceSets.test.runtimeClasspath + files("src/main/data")
}

run {
	classpath = project.sourceSets.test.runtimeClasspath + files("src/main/data")
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

task scene(type: JavaExec, dependsOn: classes) {
	main sceneClass
	classpath sourceSets.main.runtimeClasspath 
}

task blender(type: JavaExec, dependsOn: classes) {
	main blenderClass
    args = ['scene.csv']
	classpath sourceSets.main.runtimeClasspath 
}

task oldMain(type: JavaExec, dependsOn: classes) {
	main oldMainClass
	classpath sourceSets.main.runtimeClasspath 
}

task createStartScript {
    doLast {
        def f = new File('zans-story')
        f.text = '''#!/bin/sh
./bin/zans-story'''
        def batch = new File('zans-story.bat')
        batch.text = '''bin/zans-story.bat'''
    }
}
task createBlenderScripts {
    doLast {
        def f = new File('scene-loader')
        f.text = '''#!/bin/sh
./bin/scene-loader'''
        def batch = new File('scene-loader.bat')
        batch.text = '''bin/scene-loader.bat'''
    }
}
distZip {
    dependsOn createStartScript
	into(project.name) {
		from '.'
		include 'assets/**', '*.dylib', '*.so', '*.map'
	}
    into(project.name) {
        from('.') {
            include 'zans-story', 'zans-story.bat'
            fileMode = 0755
        }
    }
}

task distBlender(type: Zip) {
    dependsOn createBlenderScripts, jar, build, distZip
    def name = 'show-scene'
    //main blenderClass
    baseName name
    into("$name/lib") {
        from "$buildDir/libs"
        include '**'
    }
    into(name) {
        from '.'
        include 'libs/**'
    }
    into("${name}/bin") {
        from "${buildDir}/scripts"
        include '**'
    }
    into(name) {
        from '.'
        include 'assets/**', '*.dylib', '*.so', '*.map'
    }
    into(name) {
        from('.') {
            include 'scene-loader', 'scene-loader.bat'
            fileMode = 0755
        }
    }
}

task packageApp(type: Exec) {
    dependsOn fatJar
    commandLine 'java', '-jar', 'tools/packr.jar'
    args 'packr-linux.json'
}
task packageWindows(type: Exec) {
    doLast {
    }
    commandLine 'echo', 'Hello', 'World'
    args 'arg1'
}

launch4j {
    //dependsOn fatJar
    mainClassName = mainClass
    jar = "$buildDir/libs/terrain-battle-0.0.1.jar"
    //icon = 'icons/myApp.ico'
}

task buildExe(type: Exec) {
    dependsOn fatJar
    commandLine './Launch4j/launch4j'
    args '../launch4j.xml'
}

task gatherWindowsFiles(type: Copy) {
	dependsOn buildExe
	from('.') {
		include 'assets/**', 'board.map', 'scene.csv', 'scene.bat'
	}
	into "$buildDir/windows"
}

task zipWindows(type: Zip) {
	dependsOn gatherWindowsFiles
	baseName project.name
	from("$buildDir/windows") {
		include '**'
	}
}