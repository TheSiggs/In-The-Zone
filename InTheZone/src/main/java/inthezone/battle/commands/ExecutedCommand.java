package inthezone.battle.commands;

import inthezone.battle.Targetable;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A command that has already been executed, plus the affected targetables.
 * */
public class ExecutedCommand {
	public final Command cmd;
	public final List<Targetable> affected;

	/**
	 * true if the is the last in a sequence of commands generated by a single command request.
	 * */
	public final boolean lastInSequence;

	public ExecutedCommand(Command cmd, List<? extends Targetable> affected) {
		this(cmd, affected, false);
	}

	private ExecutedCommand(
		Command cmd, List<? extends Targetable> affected, boolean lastInSequence
	) {
		this.cmd = cmd;
		this.affected = affected.stream().map(t -> t.clone()).collect(Collectors.toList());
		this.lastInSequence = lastInSequence;
	}

	public ExecutedCommand markLastInSequence() {
		return new ExecutedCommand(cmd, affected, true);
	}
}

